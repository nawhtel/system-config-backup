/* See LICENSE file for copyright and license details. */
#include <X11/XF86keysym.h>
#define Button6 6
#define Button7 7
#define Button8 8
#define Button9 9

/* appearance */
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const int focusonwheel       = 0;
static const char *fonts[]          = { "monospace:size=10" };
static const char dmenufont[]       = "monospace:size=10";
static const char col_gray1[]       = "#222222";
static const char col_gray2[]       = "#444444";
static const char col_gray3[]       = "#bbbbbb";
static const char col_gray4[]       = "#eeeeee";
static const char col_cyan[]        = "#005577";
static const char *colors[][3]      = {
  /*               fg         bg         border   */
  [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
  [SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
  [SchemeHid]  = { col_cyan,  col_gray1, col_cyan  },
};

/* tagging */
static const char *tags[] = { "Top", "Buffer", "Ref", "4", "5", "6", "7", "8", "9" };

static const Rule rules[] = {
  /* xprop(1):
   *	WM_CLASS(STRING) = instance, class
   *	WM_NAME(STRING) = title
   */
  /* class      instance    title       tags mask     isfloating   monitor */
  { "Gimp",     NULL,       NULL,       0,            1,           -1 },
  { "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
  /* symbol     arrange function */
  { "[]=",      tile },    /* first entry is default */
  { "><>",      NULL },    /* no layout function means floating behavior */
  { "[M]",      monocle },
  { "[D]",      deck },
};
/* custom functions declarations */
static void unhideall(const Arg *arg);
static void movemouse1(const Arg *arg);
static void resizemouse1(const Arg *arg);
static void moveresize1(const Arg *arg);
static void moveresizeedge1(const Arg *arg);
static void resetnmaster(const Arg *arg);

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG)						\
  { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
static const char *termcmd[]  = { "st", NULL };

static const char *upvol[] = { "amixer", "-q", "set", "Master", "2+", NULL };
static const char *downvol[] = { "amixer", "-q", "set", "Master", "2-", NULL };
static const char *mute[] = { "amixer", "-q", "set", "Master", "toggle", NULL };

static const char *emacscmd[] = { "emacsclient", "-a", "", "-c", NULL };
static const char *emacsdiredcmd[] = { "emacsclient", "-a", "", "-c", "~/", NULL };
static const char *zathuracmd[] = { "zathura", NULL };
static const char *chromiumcmd[] = { "chromium", NULL };
static const char *roxcmd[] = { "rox", NULL };
static const char *passtypecmd[] = { "passmenu", "--type", NULL };

static Key keys[] = {
  /* modifier                     key        function        argument */
  { 0,             XF86XK_AudioRaiseVolume,  spawn,          {.v = upvol } },
  { 0,             XF86XK_AudioLowerVolume,  spawn,          {.v = downvol } },
  { 0,             XF86XK_AudioMute,         spawn,          {.v = mute } },
  { MODKEY,                       XK_e,      spawn,          {.v = emacscmd } },
  { MODKEY|ShiftMask,             XK_e,      spawn,          {.v = emacsdiredcmd } },
  { MODKEY,                       XK_a,      spawn,          {.v = zathuracmd } },
  { MODKEY,                       XK_w,      spawn,          {.v = chromiumcmd } },
  { MODKEY,			  XK_r,      spawn,	     {.v = roxcmd } },
  { MODKEY|ShiftMask,			  XK_p,      spawn,	     {.v = passtypecmd } },

  { MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
  { MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
  { MODKEY,                       XK_b,      togglebar,      {0} },
  { MODKEY,                       XK_j,      focusstackvis,  {.i = +1 } },
  { MODKEY,                       XK_k,      focusstackvis,  {.i = -1 } },
  { MODKEY|ShiftMask,             XK_j,      focusstackhid,  {.i = +1 } },
  { MODKEY|ShiftMask,             XK_k,      focusstackhid,  {.i = -1 } },
  { MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
  { MODKEY,                       XK_d,      resetnmaster,     {.i = -1 } },
  { MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
  { MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
  { MODKEY,                       XK_Return, zoom,           {0} },
  { MODKEY,                       XK_Tab,    view,           {0} },
  { MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
  { MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
  { MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
  { MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
  { MODKEY,                       XK_c,      setlayout,      {.v = &layouts[3]} },
  { MODKEY,                       XK_space,  setlayout,      {0} },
  { MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
  { MODKEY,                       XK_Down,   moveresize1,     {.v = "0x 25y 0w 0h" } },
  { MODKEY,                       XK_Up,     moveresize1,     {.v = "0x -25y 0w 0h" } },
  { MODKEY,                       XK_Right,  moveresize1,     {.v = "25x 0y 0w 0h" } },
  { MODKEY,                       XK_Left,   moveresize1,     {.v = "-25x 0y 0w 0h" } },
  { MODKEY|ShiftMask,             XK_Down,   moveresize1,     {.v = "0x 0y 0w 25h" } },
  { MODKEY|ShiftMask,             XK_Up,     moveresize1,     {.v = "0x 0y 0w -25h" } },
  { MODKEY|ShiftMask,             XK_Right,  moveresize1,     {.v = "0x 0y 25w 0h" } },
  { MODKEY|ShiftMask,             XK_Left,   moveresize1,     {.v = "0x 0y -25w 0h" } },
  { MODKEY|ControlMask,           XK_Up,     moveresizeedge1, {.v = "t"} },
  { MODKEY|ControlMask,           XK_Down,   moveresizeedge1, {.v = "b"} },
  { MODKEY|ControlMask,           XK_Left,   moveresizeedge1, {.v = "l"} },
  { MODKEY|ControlMask,           XK_Right,  moveresizeedge1, {.v = "r"} },
  { MODKEY|ControlMask|ShiftMask, XK_Up,     moveresizeedge1, {.v = "T"} },
  { MODKEY|ControlMask|ShiftMask, XK_Down,   moveresizeedge1, {.v = "B"} },
  { MODKEY|ControlMask|ShiftMask, XK_Left,   moveresizeedge1, {.v = "L"} },
  { MODKEY|ControlMask|ShiftMask, XK_Right,  moveresizeedge1, {.v = "R"} },
  { MODKEY,                       XK_0,      view,           {.ui = ~0 } },
  { MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
  { MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
  { MODKEY,                       XK_period, focusmon,       {.i = +1 } },
  { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
  { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
  { MODKEY,                       XK_s,      hide,           {0} },
  { MODKEY|ShiftMask,             XK_s,      unhideall,      {0} },
  TAGKEYS(                        XK_1,                      0)
  TAGKEYS(                        XK_2,                      1)
  TAGKEYS(                        XK_3,                      2)
  TAGKEYS(                        XK_4,                      3)
  TAGKEYS(                        XK_5,                      4)
  TAGKEYS(                        XK_6,                      5)
  TAGKEYS(                        XK_7,                      6)
  TAGKEYS(                        XK_8,                      7)
  TAGKEYS(                        XK_9,                      8)
  { MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
  /* click                event mask      button          function        argument */
  { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
  { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
  { ClkWinTitle,          0,              Button1,        togglewin,      {0} },
  { ClkWinTitle,          0,              Button2,        zoom,           {0} },
  { ClkClientWin,         MODKEY,         Button4,        focusstackvis, {.i = -1} },
  { ClkClientWin,         MODKEY,         Button5,        focusstackvis,    {.i = +1} },
  { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
  { ClkStatusText,        0,              Button1,        spawn,          {.v = roxcmd } },
  { ClkStatusText,        0,              Button3,        spawn,          {.v = chromiumcmd } },
  { ClkStatusText,        0,              Button4,        spawn,          {.v = upvol } },
  { ClkStatusText,        0,              Button5,        spawn,          {.v = downvol } },
  { ClkClientWin,         MODKEY,         Button1,        movemouse1,      {.v = &layouts[1]} },
  { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
  { ClkClientWin,         MODKEY,         Button3,        resizemouse1,    {.v = &layouts[1]} },
  { ClkClientWin,         MODKEY,         Button4,        focusstackvis, {.i = -1} },
  { ClkClientWin,         MODKEY,         Button5,        focusstackvis,    {.i = +1} },
  { ClkClientWin,         MODKEY|ControlMask,         Button1,     moveresizeedge1, {.v = "l" }},
  { ClkClientWin,         MODKEY|ControlMask,         Button3,     moveresizeedge1, {.v = "r" }},
  { ClkClientWin,         MODKEY|ShiftMask,           Button1,     moveresizeedge1, {.v = "t" }},
  { ClkClientWin,         MODKEY|ShiftMask,           Button3,     moveresizeedge1, {.v = "b" }},
  { ClkClientWin,         MODKEY|ShiftMask,           Button4,   moveresize1,     {.v = "0x 0y 0w -25h" } },
  { ClkClientWin,         MODKEY|ShiftMask,           Button5,     moveresize1,     {.v = "0x 0y 0w 25h" } },
  { ClkClientWin,         MODKEY|ControlMask,           Button4,  moveresize1,     {.v = "0x 0y 25w 0h" } },
  { ClkClientWin,         MODKEY|ControlMask,           Button5,   moveresize1,     {.v = "0x 0y -25w 0h" } },
  { ClkClientWin,         MODKEY|ControlMask|ShiftMask,         Button1,     moveresizeedge1, {.v = "L" }},
  { ClkClientWin,         MODKEY|ControlMask|ShiftMask,         Button3,     moveresizeedge1, {.v = "R" }},
  { ClkClientWin,         MODKEY|ControlMask|ShiftMask,         Button4,     moveresizeedge1, {.v = "T" }},
  { ClkClientWin,         MODKEY|ControlMask|ShiftMask,         Button5,     moveresizeedge1, {.v = "B" }},
  /* { ClkClientWin,         MODKEY|ShiftMask,         Button1,        movemouse,      {0} }, */
  /* { ClkClientWin,         MODKEY|ShiftMask,         Button3,        resizemouse,    {0} }, */
  { ClkClientWin,         0,         Button9,        movemouse1,      {.v = &layouts[1]} },
  { ClkClientWin,         0,         Button8,        resizemouse1,    {.v = &layouts[1]} },
  { ClkTagBar,            0,              Button1,        view,           {0} },
  { ClkTagBar,            0,              Button3,        toggleview,     {0} },
  { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
  { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

/* custom functions */
void unhideall(const Arg *arg)
{
  Monitor *m;
  Client *c;
  selmon->hidsel = 0;

  for (m = mons; m; m = m->next) {
    if (m) {
      for (c = m->clients; c; c = c->next)
	if (c && HIDDEN(c)) showwin(c);
    }
  }
}

void
resetnmaster(const Arg *arg)
{
  selmon->nmaster = 1;
  arrange(selmon);
}

/* dirty wrappers to toggle floating layout first */

void movemouse1(const Arg *arg)
{
  if (selmon->lt[selmon->sellt] != &layouts[1])
    setlayout(arg);
  movemouse(0);
}

void resizemouse1(const Arg *arg)
{
  if (selmon->lt[selmon->sellt] != &layouts[1])
    setlayout(arg);
  resizemouse(0);
}

void moveresize1(const Arg *arg)
{
  if (selmon->lt[selmon->sellt] != &layouts[1])
    {
      Arg temp = {.v = &layouts[1]};
      setlayout(&temp);
    }
  moveresize(arg);

}
void moveresizeedge1(const Arg *arg)
{
  if (selmon->lt[selmon->sellt] != &layouts[1])
    {
      Arg temp = {.v = &layouts[1]};
      setlayout(&temp);
    }
  moveresizeedge(arg);

}
/*
  remember to
  put restack(selmon) in the focusonclick patch,
  awesomebar or some other patch has conflict with focusonclick patch,
  just remove and add contextline if enough
  attachbottom moveresize awesomebar deck pertag
*/
